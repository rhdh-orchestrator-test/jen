id: greeting
version: '1.0.0-SNAPSHOT'
specVersion: '0.8'
name: 'greeting'
description: 'New and testy '
annotations:
  - "workflow-type/assessment"
dataInputSchema:
  schema: schemas/greeting-input-schema.json
  failOnValidationErrors: true
start: StartState
extensions:
  - extensionid: workflow-output-schema
    outputSchema:
      schema: schemas/greeting-workflow-result-schema.json
      failOnValidationErrors: true
functions:
  - name: execute
    type: custom
    operation: "service:java:io.janus.workflow.greeting.SampleAssessment::execute"
  - name: logOutput
    type: custom
    operation: "sysout:INFO"
  - name: extract
    type: expression
    operation: ".executeResult | flatten | map(.id)"
  - name: checkProcessDefinitionExistence
    operation: specs/greeting-dataindex.yaml#reactiveGraphQLHandlerPost
  - name: removeMissingWorkflowsFromOptions
    type: expression
    operation: '.missingWorkflows as $f | .executeResult | walk( if type == "object" then select(all($f[] != .id; .)) else . end )'
  - name: assessmentResult
    type: expression
    operation: '{
        result: {
          "completedWith":"success",
          "message": "The workflow greeting completed successfully",
          "outputs":[
            {
              "key": "Validated Result - new options",
              "value": (.validatedResult.newOptions | join(","))
            },
            {
              "key": "Validated Result - other options",
              "value": (.validatedResult.otherOptions | join(","))
            },
            {
              "key": "Validated Result - upgrade options",
              "value": (.validatedResult.upgradeOptions | join(","))
            },
            {
              "key": "Validated Result - migration options",
              "value": (.validatedResult.migrationOptions | join(","))
            },
            {
              "key": "Validated Result - continuation options",
              "value": (.validatedResult.continuationOptions | join(","))
            }
          ],
          "nextWorkflows":[
            {
                "id": .executeResult.currentVersion.id,
                "name": .executeResult.currentVersion.name
            }
          ]
        }
      }'
  - name: errorAssessmentResult
    type: expression
    operation: '{
        result: {
          "completedWith":"error",
          "message": "The workflow greeting completed with error",
          "outputs":[
            {
              "key": "Missing Workflows",
              "value": (.missingWorkflows | join(","))
            }
          ],
          "nextWorkflows":[]
        }
      }'
states:
  - name: StartState
    type: operation
    stateDataFilter:
      output: '. +={workflowOptions: .preCheck.validatedResult}'
    actions:
      - name: executeAction
        functionRef:
          refName: execute
          arguments:
            sampleText: ".sampleText"
        actionDataFilter:
          toStateData: ".executeResult"
    transition: ExtractWorkflows
  - name: ExtractWorkflows
    type: operation
    actions:
      - name: ExtractWorkflowsAction
        functionRef:
          refName: extract
        actionDataFilter:
          toStateData: ".infrasWorkflows"
    transition: QueryWorkflow
  - name: QueryWorkflow
    type: foreach
    inputCollection: "${ .infrasWorkflows }"
    outputCollection: "${ .fetchResults }"
    iterationParam: infrasWorkflow
    actions:
    - name: checkAction
      functionRef:
        refName: checkProcessDefinitionExistence
        arguments:
          query: "query CheckProcessDefQuery($id: String) { ProcessDefinitions  ( where: {id: { equal: $id} } ) { id } }"
          variables: 
            id: "${ .infrasWorkflow }"
          operationName: "CheckProcessDefQuery"
      actionDataFilter:
        results: "${ .data.ProcessDefinitions[0].id }"
    transition: Check
  - name: Check
    type: switch
    dataConditions:
      - condition: (.infrasWorkflows-.fetchResults | length > 0)
        transition: PrintError
    defaultCondition:
      transition: HandleNoError
  - name: PrintError
    type: operation
    actions:
    - name: error
      functionRef:
        refName: logOutput
        arguments:
          message: "\"workflows: \\(.infrasWorkflows-.fetchResults) are not found\""
    stateDataFilter:
      output: ". += { missingWorkflows: (.infrasWorkflows - .fetchResults) } | del(.infrasWorkflows, .fetchResults)"
    transition: HandleError
  - name: HandleError
    type: operation
    actions:
    - name: error
      functionRef:
        refName: removeMissingWorkflowsFromOptions
      actionDataFilter:
        toStateData: "${ .validatedResult }"
    stateDataFilter:
      output: ".originalResult = .executeResult | del(.executeResult)"
    transition: reportFailure
  - name: reportFailure
    type: operation
    actions:
      - name: reportFailure
        functionRef:
          refName: errorAssessmentResult
    transition: printAction
  - name: HandleNoError
    type: operation
    actions: []
    stateDataFilter:
      output: ".validatedResult = .executeResult | del(.infrasWorkflows, .fetchResults)"
    transition: reportNoError
  - name: reportNoError
    type: operation
    actions:
      - name: reportNoError
        functionRef:
          refName: assessmentResult
    transition: printAction
  - name: printAction
    type: operation
    actions:
      - functionRef:
          refName: logOutput
          arguments:
            message: ".result"
    end: true